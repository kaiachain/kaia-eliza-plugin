{"version":3,"sources":["../src/actions/index.ts","../src/actions/accounts/getCurrentBalance.ts","../src/environment.ts","../src/templates/getAddress.ts","../src/examples/getCurrentBalance.ts","../src/services/base.ts","../src/services/account.ts","../src/services/transaction.ts","../src/services/kaiaInfo.ts","../src/services/index.ts","../src/constants/index.ts","../src/actions/accounts/getNFTBalance.ts","../src/examples/getNFTBalance.ts","../src/actions/accounts/getFTBalanceDetails.ts","../src/examples/getFTBalanceDetails.ts","../src/actions/accounts/getAccountOverview.ts","../src/examples/getAccountOverview.ts","../src/actions/accounts/transfer.ts","../src/providers/wallet.ts","../src/templates/transfer.ts","../src/examples/transfer.ts","../src/actions/accounts/faucet.ts","../src/templates/faucet.ts","../src/examples/faucet.ts","../src/actions/transactions/getLatestBlock.ts","../src/templates/getNetwork.ts","../src/examples/getLatestBlock.ts","../src/actions/transactions/getBlockInfo.ts","../src/templates/getBlockNumber.ts","../src/actions/transactions/getTransactionsByAccount.ts","../src/examples/getTransactionsByAccount.ts","../src/templates/getTransactionsByAccount.ts","../src/actions/kaiaInfo/getKaiaInfo.ts","../src/examples/getKaiaInfo.ts","../src/index.ts"],"sourcesContent":["export * from \"./accounts/getCurrentBalance.ts\";\nexport * from \"./accounts/getNFTBalance.ts\";\nexport * from \"./accounts/getFTBalanceDetails.ts\";\nexport * from \"./accounts/getAccountOverview.ts\";\nexport * from \"./accounts/transfer.ts\";\nexport * from \"./accounts/faucet.ts\";\nexport * from \"./transactions/getLatestBlock.ts\";\nexport * from \"./transactions/getBlockInfo.ts\";\nexport * from \"./transactions/getTransactionsByAccount.ts\";\nexport * from \"./kaiaInfo/getKaiaInfo.ts\";\n","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getAddressTemplate } from \"../../templates/getAddress\";\nimport { getCurrentBalanceExamples } from \"../../examples/getCurrentBalance\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\n\nexport const getCurrentBalanceAction: Action = {\n    name: \"GET_CURRENT_BALANCE\",\n    similes: [\n        \"BALANCE\",\n        \"KAIA_BALANCE\",\n        \"CHECK_KAIA_BALANCE\",\n        \"CHECK_BALANCE\",\n        \"CHECKOUT_BALANCE\",\n        \"CHECK_FUNDS\",\n        \"FUNDS\",\n    ],\n    description: \"Get the current balance for a given address\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const balanceContext = composeContext({\n            state,\n            template: getAddressTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: balanceContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // parse content\n        const hasAddress = content?.address && !content?.error;\n\n        if (!hasAddress) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL[String(content.network)],\n        });\n\n        // Fetch Account Balance & respond\n        try {\n            const kaiaScanData = await kaiaScanService.getCurrentBalance(\n                String(content?.address || \"\")\n            );\n            elizaLogger.success(\n                `Successfully fetched balance for ${content.address}`\n            );\n\n            if (callback) {\n                callback({\n                    text: `The current balance of ${content.address} is ${kaiaScanData.balance} KAIA on ${String(content.network)}`,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_CURRENT_BALANCE handler:\", error);\n            if(error instanceof Error) {\n                callback({\n                    text: `Error fetching balance: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getCurrentBalanceExamples as ActionExample[][],\n} as Action;\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const kaiaScanEnvSchema = z.object({\n    KAIA_KAIASCAN_API_KEY: z.string().min(1, \"KaiaScan API key is required\"),\n});\n\nexport type KaiaScanConfig = z.infer<typeof kaiaScanEnvSchema>;\n\nexport async function validateKaiaScanConfig(\n    runtime: IAgentRuntime\n): Promise<KaiaScanConfig> {\n    try {\n        const config = {\n            KAIA_KAIASCAN_API_KEY: runtime.getSetting(\"KAIA_KAIASCAN_API_KEY\"),\n        };\n\n        return kaiaScanEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `KaiaScan configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","export const getAddressTemplate = `Respond with a JSON object containing the \"address\" and \"network\". The address must be a valid Kaia EVM address provided in the input. \n\nIMPORTANT: Response must ALWAYS include both \"address\" and \"network\" fields.\n\nExample responses:\n\\`\\`\\`json\n{\n    \"address\": \"0x1234567890abcdef1234567890abcdef12345678\",\n    \"network\": \"kairos\"\n}\n\\`\\`\\`\n\\`\\`\\`json\n{\n    \"address\": \"0xabcdefabcdefabcdefabcdefabcdefabcdefabcd\",\n    \"network\": \"kaia\"\n}\n\\`\\`\\`\n\\`\\`\\`json\n{\n    \"address\": \"0x9876543210fedcba9876543210fedcba98765432\",\n    \"network\": \"kairos\"\n}\n\\`\\`\\`\n\\`\\`\\`json\n{\n    \"address\": \"0xa1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\",\n    \"network\": \"kaia\"\n}\n\\`\\`\\\n\n{{recentMessages}}\n\nExtract the Kaia EVM address from the most recent message. Respond with a JSON markdown block containing both \"address\" and \"network\".\n\nIf there is no mention of network in the message, assume it's the kaia.`;\n\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const getCurrentBalanceExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the kaia balance like right now?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"In which address?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"0x4d69770905f43c07d4085dfd296a03484d05280f\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me check the current balance in 0x4d69770905f43c07d4085dfd296a03484d05280f for you.\",\n                action: \"GET_CURRENT_BALANCE\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the balance of 0x4d69770905f43c07d4085dfd296a03484d05280f?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the current balance in 0x4d69770905f43c07d4085dfd296a03484d05280f for you.\",\n                action: \"GET_CURRENT_BALANCE\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Is there any funds in 0x4d69770905f43c07d4085dfd296a03484d05280f?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the current balance in 0x4d69770905f43c07d4085dfd296a03484d05280f.\",\n                action: \"GET_CURRENT_BALANCE\",\n            },\n        }\n    ],\n];\n","import { Config } from \"../types/account\";\n\nexport abstract class BaseService {\n    protected config: Config;\n    \n    constructor(config) {\n        this.config = config;\n    }\n}","import type { GetAccountResponse } from \"../types/account\";\nimport { BaseService } from \"./base\";\n\nexport class AccountService extends BaseService {\n\n    getCurrentBalance = async (\n        accountAddress: string\n      ): Promise<GetAccountResponse> => {\n        if (!this.config.apiKey || !accountAddress) {\n          throw new Error(\"Invalid parameters\");\n        }\n\n        if(!this.config.baseUrl) {\n            throw new Error(\"Invalid network\");\n        }\n        \n        try {\n          const url = new URL(`${this.config.baseUrl}/accounts/${accountAddress}`);\n      \n          const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n              Accept: \"*/*\",\n              Authorization: `Bearer ${this.config.apiKey}`,\n            },\n          });\n      \n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error?.message || response.statusText);\n          }\n      \n          const data = await response.json();\n      \n          return data ;\n        } catch (error) {\n          console.error(\"KaiaScan API Error:\", error.message);\n          throw error;\n        }\n      }\n\n      getNFTBalance = async (\n        accountAddress: string\n      ): Promise<GetAccountResponse> => {\n        if (!this.config.apiKey || !accountAddress) {\n          throw new Error(\"Invalid parameters\");\n        }\n\n        if(!this.config.baseUrl) {\n            throw new Error(\"Invalid network\");\n        }\n              \n        try {\n          const url = new URL(`${this.config.baseUrl}/accounts/${accountAddress}/nft-balances/kip17`);\n      \n          const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n              Accept: \"*/*\",\n              Authorization: `Bearer ${this.config.apiKey}`,\n            },\n          });\n      \n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error?.message || response.statusText);\n          }\n      \n          const data = await response.json();\n      \n          return data ;\n        } catch (error) {\n          console.error(\"KaiaScan API Error:\", error.message);\n          throw error;\n        }\n      }        \n\n      getFTBalanceDetails = async (\n        accountAddress: string\n      ): Promise<GetAccountResponse> => {\n        if (!this.config.apiKey || !accountAddress) {\n          throw new Error(\"Invalid parameters\");\n        }\n\n        if(!this.config.baseUrl) {\n            throw new Error(\"Invalid network\");\n        }\n              \n        try {\n          const url = new URL(`${this.config.baseUrl}/accounts/${accountAddress}/token-details`);\n      \n          const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n              Accept: \"*/*\",\n              Authorization: `Bearer ${this.config.apiKey}`,\n            },\n          });\n      \n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error?.message || response.statusText);\n          }\n      \n          const data = await response.json();\n      \n          return data ;\n        } catch (error) {\n          console.error(\"KaiaScan API Error:\", error.message);\n          throw error;\n        }\n      }\n\n      getAccountOverview = async (\n        accountAddress: string\n      ): Promise<GetAccountResponse> => {\n        if (!this.config.apiKey || !accountAddress) {\n          throw new Error(\"Invalid parameters\");\n        }\n\n        if(!this.config.baseUrl) {\n            throw new Error(\"Invalid network\");\n        }\n              \n        try {\n          const url = new URL(`${this.config.baseUrl}/accounts/${accountAddress}`);\n      \n          const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n              Accept: \"*/*\",\n              Authorization: `Bearer ${this.config.apiKey}`,\n            },\n          });\n      \n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error?.message || response.statusText);\n          }\n      \n          const data = await response.json();\n      \n          return data ;\n        } catch (error) {\n          console.error(\"KaiaScan API Error:\", error.message);\n          throw error;\n        }\n      }\n\n}","import type {\n  GetLatestBlockResponse,\n  GetBlockResponse,\n  GetTransactionsByBlockNumber,\n  GetTransactionsByAccount,\n} from \"../types\";\nimport { BaseService } from \"./base\";\n\nexport class TransactionService extends BaseService {\n  getLatestBlock = async (): Promise<GetLatestBlockResponse> => {\n    if (!this.config.apiKey) {\n      throw new Error(\"Invalid parameters\");\n    }\n\n    if (!this.config.baseUrl) {\n      throw new Error(\"Invalid network\");\n    }\n\n    try {\n      const url = new URL(`${this.config.baseUrl}/blocks/latest`);\n\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          Accept: \"*/*\",\n          Authorization: `Bearer ${this.config.apiKey}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error?.message || response.statusText);\n      }\n\n      const data = await response.json();\n\n      return data;\n    } catch (error) {\n      console.error(\"KaiaScan API Error:\", error.message);\n      throw error;\n    }\n  };\n\n  getBlock = async (blockNumber: string): Promise<GetBlockResponse> => {\n    if (!this.config.apiKey) {\n      throw new Error(\"Invalid parameters\");\n    }\n\n    if (!this.config.baseUrl) {\n      throw new Error(\"Invalid network\");\n    }\n\n    if (!blockNumber) {\n      throw new Error(\"Invalid Block Number\");\n    }\n\n    try {\n      const url = new URL(`${this.config.baseUrl}/blocks/${blockNumber}`);\n\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          Accept: \"*/*\",\n          Authorization: `Bearer ${this.config.apiKey}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error?.message || response.statusText);\n      }\n\n      const data = await response.json();\n\n      return data;\n    } catch (error) {\n      console.error(\"KaiaScan API Error:\", error.message);\n      throw error;\n    }\n  };\n\n  getTransactionsByBlockNumber = async (\n    blockNumber: string\n  ): Promise<GetTransactionsByBlockNumber> => {\n    if (!this.config.apiKey) {\n      throw new Error(\"Invalid parameters\");\n    }\n\n    if (!this.config.baseUrl) {\n      throw new Error(\"Invalid network\");\n    }\n\n    if (!blockNumber) {\n      throw new Error(\"Invalid Block Number\");\n    }\n\n    try {\n      const url = new URL(\n        `${this.config.baseUrl}/transactions?blockNumberStart=${blockNumber}&blockNumberEnd=${blockNumber}`\n      );\n\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          Accept: \"*/*\",\n          Authorization: `Bearer ${this.config.apiKey}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error?.message || response.statusText);\n      }\n\n      const data = await response.json();\n\n      return data;\n    } catch (error) {\n      console.error(\"KaiaScan API Error:\", error.message);\n      throw error;\n    }\n  };\n\n  getTransactionsByAccount = async (\n    address: string\n  ): Promise<GetTransactionsByAccount> => {\n    if (!this.config.apiKey) {\n      throw new Error(\"Invalid parameters\");\n    }\n\n    if (!this.config.baseUrl) {\n      throw new Error(\"Invalid network\");\n    }\n\n    if (!address) {\n      throw new Error(\"Invalid Address\");\n    }\n\n    try {\n      const url = new URL(\n        `${this.config.baseUrl}/accounts/${address}/transactions`\n      );\n\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          Accept: \"*/*\",\n          Authorization: `Bearer ${this.config.apiKey}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error?.message || response.statusText);\n      }\n\n      const data = await response.json();\n\n      return data;\n    } catch (error) {\n      console.error(\"KaiaScan API Error:\", error.message);\n      throw error;\n    }\n  };\n}\n","import type { GetKaiaInfoResponse } from \"../types/kaiaInfo\";\nimport { BaseService } from \"./base\";\n\nexport class KaiaInfoService extends BaseService {\n    getKaiaInfo = async (): Promise<GetKaiaInfoResponse> => {\n        if (!this.config.apiKey) {\n            throw new Error(\"Invalid parameters\");\n        }\n        \n        try {\n            const url = new URL(`${this.config.baseUrl}/kaia`);\n        \n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"*/*\",\n                    Authorization: `Bearer ${this.config.apiKey}`,\n                },\n            });\n        \n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error?.message || response.statusText);\n            }\n        \n            const data = await response.json();\n        \n            return data ;\n        } catch (error) {\n            console.error(\"KaiaScan API Error:\", error.message);\n            throw error;\n        }\n    }\n}","import { AccountService } from \"./account\";\nimport { TransactionService } from \"./transaction\";\nimport { KaiaInfoService } from \"./kaiaInfo\";\nimport { Config } from \"../types/account\";\n\nexport class KaiaScanService {\n    private config: Config;\n    private accountService: AccountService ;\n    private transactionService: TransactionService;\n    private kaiaInfoService: KaiaInfoService;\n\n    constructor(config) {\n        this.config = {\n            apiKey: config.apiKey,\n            baseUrl: config.baseUrl\n        };\n\n        this.accountService = new AccountService(this.config);\n        this.transactionService = new TransactionService(this.config);\n        this.kaiaInfoService = new KaiaInfoService(this.config);\n    }\n\n    async getCurrentBalance(accountAddress: string) {\n        return this.accountService.getCurrentBalance(accountAddress);\n    }\n\n    async getLatestBlock() {\n        return this.transactionService.getLatestBlock();\n    }\n\n    async getBlock(blockNumber: string) {\n        return this.transactionService.getBlock(blockNumber);\n    }\n\n    async getTransactionsByBlockNumber(blockNumber: string) {\n        return this.transactionService.getTransactionsByBlockNumber(blockNumber);\n    }\n\n    async getTransactionsByAccount(blockNumber: string) {\n        return this.transactionService.getTransactionsByAccount(blockNumber);\n    }\n    \n    async getNFTBalance(accountAddress: string) {\n        return this.accountService.getNFTBalance(accountAddress);\n    }\n\n    async getFTBalanceDetails(accountAddress: string) {\n        return this.accountService.getFTBalanceDetails(accountAddress);\n    }\n\n    async getAccountOverview(accountAddress: string) {\n        return this.accountService.getAccountOverview(accountAddress);\n    }\n\n    async getKaiaInfo() {\n        return this.kaiaInfoService.getKaiaInfo();\n    }\n}","export const API_DEFAULTS = {\n    BASE_URL: {\n        \"kairos\": \"https://kairos-oapi.kaiascan.io/api/v1\",\n        \"kaia\": \"https://mainnet-oapi.kaiascan.io/api/v1\",\n    },\n    TIMEOUT: 30000,\n};","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getAddressTemplate } from \"../../templates/getAddress\";\nimport { getNFTBalanceExamples } from \"../../examples/getNFTBalance\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\nimport { GetAccountResponse, Contract } from \"../../types\";\n\nexport const getNFTBalanceAction: Action = {\n    name: \"GET_NFT_BALANCE\",\n    similes: [\n        \"NFT_BALANCE\",\n        \"NFT\",\n        \"KAIA_NFT_BALANCE\",\n        \"CHECK_NFT_BALANCE\",\n        \"CHECK_NFT\",\n        \"NFTS\",\n        \"NON_FUNGIBLE_TOKENS\",\n        \"NON_FUNGIBLE_TOKEN_BALANCE\",\n    ],\n    description: \"Get the NFT balance for a given address\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const nFTalanceContext = composeContext({\n            state,\n            template: getAddressTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: nFTalanceContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // parse content\n        const hasAddress = content?.address && !content?.error;\n\n        if (!hasAddress) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL[String(content.network)],\n        });\n\n        // Fetch NFT Balance & respond\n        try {\n            const kaiaScanData: GetAccountResponse = await kaiaScanService.getNFTBalance(\n                String(content?.address || \"\")\n            );\n            elizaLogger.success(\n                `Successfully fetched NFT for ${content.address}`\n            );\n\n            if (callback) {\n                const totalCount = kaiaScanData.paging.total_count;\n                let responseText = `Your account has ${totalCount} NFT Collections. They are as follows:\\n`;\n\n                kaiaScanData.results.forEach((item: Contract, index: number) => {\n                    responseText += `${index + 1}. Contract address - ${item.contract.contract_address} | Token count - ${item.token_count}\\n`;\n                });\n\n                callback({\n                    text: responseText,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_NFT_BALANCE handler:\", error);\n\n            if(error instanceof Error) {\n                callback({\n                    text: `Error fetching NFT Balance: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getNFTBalanceExamples as ActionExample[][],\n} as Action;\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const getNFTBalanceExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the NFT balance of 0x4d69770905f43c07d4085dfd296a03484d05280f?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the NFT balance in 0x4d69770905f43c07d4085dfd296a03484d05280f for you.\",\n                action: \"GET_NFT_BALANCE\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Which NFTs are in 0x1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me see which NFTs are in 0x1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t.\",\n                action: \"GET_NFT_BALANCE\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the balance of 0x5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4 on kaia mainnet?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the NFT balance in 0x5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4 on kaia mainnet for you.\",\n                action: \"GET_NFT_BALANCE\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the non fungible tokens balance of 0x9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7a8 on kaia mainnet?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the non fungible tokens balance in 0x9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7a8 on kaia mainnet for you.\",\n                action: \"GET_NFT_BALANCE\",\n            },\n        }\n    ],\n   \n];","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getAddressTemplate } from \"../../templates/getAddress\";\nimport { getFTBalanceDetailsExamples } from \"../../examples/getFTBalanceDetails\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\nimport { GetAccountResponse, Contract } from \"../../types\";\n\nexport const getFTBalanceDetailsAction: Action = {\n    name: \"GET_FT_BALANCE_DETAILS\",\n    similes: [\n        \"FUNGIBLE_TOKEN_BALANCE\",\n        \"FT_BALANCE\",\n        \"KAIA_FT_BALANCE\",\n        \"CHECK_FT_BALANCE\",\n        \"CHECK_FT\",\n        \"FT\",\n    ],\n    description: \"Get the Fungible Balance for a given address\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const fTBalanceContext = composeContext({\n            state,\n            template: getAddressTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: fTBalanceContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // parse content\n        const hasAddress = content?.address && !content?.error;\n\n        if (!hasAddress) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL[String(content.network)],\n        });\n\n        // Fetch Fungible Token Details & respond\n        try {\n            const kaiaScanData: GetAccountResponse = await kaiaScanService.getFTBalanceDetails(\n                String(content?.address || \"\")\n            );\n            elizaLogger.success(\n                `Successfully fetched FT for ${content.address}`\n            );\n\n            if (callback) {\n                const totalCount = kaiaScanData.paging.total_count;\n                let responseText: string = `Your account has ${totalCount} FTs. They are as follows:\\n`;\n\n                kaiaScanData.results.forEach((item: Contract, index: number) => {\n                    responseText += `${index + 1}. Contract address = ${item.contract.contract_address} | symbol = ${item.contract.symbol} | name = ${item.contract.name} | total supply = ${item.contract.total_supply} | balance = ${item.balance}\\n`;\n                });\n\n                callback({\n                    text: responseText,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\n                \"Error in GET_FT_BALANCE_DETAILS handler:\",\n                error\n            );\n            if(error instanceof Error) {\n                callback({\n                    text: `Error fetching FT Balance: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getFTBalanceDetailsExamples as ActionExample[][],\n} as Action;\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const getFTBalanceDetailsExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the fungible token balance of 0x4d69770905f43c07d4085dfd296a03484d05280f?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the fungible token balance in 0x4d69770905f43c07d4085dfd296a03484d05280f for you.\",\n                action: \"GET_FT_BALANCE_DETAILS\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"How many FT tokens are in 0x4d69770905f43c07d4085dfd296a03484d05280f?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me see how many FT tokens are in 0x4d69770905f43c07d4085dfd296a03484d05280f.\",\n                action: \"GET_FT_BALANCE_DETAILS\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the balance of 0x4d69770905f43c07d4085dfd296a03484d05280f on kaia mainnet?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the fungible token balance in 0x4d69770905f43c07d4085dfd296a03484d05280f on kaia mainnet for you.\",\n                action: \"GET_FT_BALANCE_DETAILS\",\n            },\n        }\n    ]\n];","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getAddressTemplate } from \"../../templates/getAddress\";\nimport { getAccountOverviewExamples } from \"../../examples/getAccountOverview\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\n\nexport const getAccountOverviewAction: Action = {\n    name: \"GET_ACCOUNT_OVERVIEW\",\n    similes: [\n        \"ACCOUNT_OVERVIEW\",\n        \"KAIA_ACCOUNT_OVERVIEW\",\n        \"CHECK_ACCOUNT_OVERVIEW\",\n        \"CHECKOUT_ACCOUNT_OVERVIEW\",\n        \"CHECK_ACCOUNT\",\n        \"ACCOUNT\",\n        \"OVERVIEW\",\n    ],\n    description: \"Get the Account Overview for a given address\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const accOverviewContext = composeContext({\n            state,\n            template: getAddressTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: accOverviewContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // parse content\n        const hasAddress = content?.address && !content?.error;\n\n        if (!hasAddress) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL[String(content.network)],\n        });\n\n        // Fetch Account Overview & respond\n        try {\n            const kaiaScanData = await kaiaScanService.getAccountOverview(\n                String(content?.address || \"\")\n            );\n            elizaLogger.success(\n                `Successfully fetched Account Overview for ${content.address}`\n            );\n\n            if (callback) {\n                let responseText = `Here are the details \\nAccount Details:\\n`;\n                responseText += `Address: ${kaiaScanData.address}\\n`;\n                responseText += `Account Type: ${kaiaScanData.account_type}\\n`;\n                responseText += `Balance: ${kaiaScanData.balance}\\n`;\n                responseText += `Total Transaction Count: ${kaiaScanData.total_transaction_count}\\n`;\n\n                callback({\n                    text: responseText,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_ACCOUNT_OVERVIEW handler:\", error);\n\n            if(error instanceof Error) {\n                callback({\n                    text: `Error fetching account overview: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            \n\n            return false;\n        }\n\n        return;\n    },\n    examples: getAccountOverviewExamples as ActionExample[][],\n} as Action;\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const getAccountOverviewExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Tell me about my account.\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Which account address would you like to check? Also, please provide the network.\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"0x840e00ffc46734c3ac97b0e88b1589f83b3874ec\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Noted, since you didn't provide the network, I'll assume it's kaia mainnet. Let me fetch the details for 0x840e00ffc46734c3ac97b0e88b1589f83b3874ec.\",\n                action: \"GET_ACCOUNT_OVERVIEW\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you give me an overview of my account?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Sure, which account address would you like to check?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"0x840e00ffc46734c3ac97b0e88b1589f83b3874ec\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me fetch the details for 0x840e00ffc46734c3ac97b0e88b1589f83b3874ec on kaia mainnet.\",\n                action: \"GET_ACCOUNT_OVERVIEW\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the overview of 0x840e00ffc46734c3ac97b0e88b1589f83b3874ec on kairos?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll get the account details for 0x840e00ffc46734c3ac97b0e88b1589f83b3874ec on kairos network.\",\n                action: \"GET_ACCOUNT_OVERVIEW\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you show me the details of my portfolio?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Which account address would you like to check?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"0x840e00ffc46734c3ac97b0e88b1589f83b3874ec on kairos network.\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Fetching the portfolio details for 0x840e00ffc46734c3ac97b0e88b1589f83b3874ec on kairos network.\",\n                action: \"GET_ACCOUNT_OVERVIEW\",\n            },\n        }\n    ],\n];","import { ByteArray, formatEther, parseEther, type Hex } from \"viem\";\nimport {\n    Action,\n    ActionExample,\n    composeContext,\n    generateObjectDeprecated,\n    HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { initWalletProvider, WalletProvider } from \"../../providers/wallet\";\nimport type { Transaction, TransferParams } from \"../../types/account\";\nimport { transferTemplate } from \"../../templates/transfer\";\nimport { transferExamples } from \"../../examples/transfer\";\n\n// Exported for tests\nexport class TransferAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<Transaction> {\n        console.log(\n            `Transferring: ${params.amount} tokens to (${params.toAddress} on ${String(params.fromChain)})`\n        );\n\n        if (!params.data) {\n            params.data = \"0x\";\n        }\n\n        this.walletProvider.switchChain(params.fromChain);\n\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: walletClient.account,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n                kzg: {\n                    blobToKzgCommitment: function (): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                    computeBlobKzgProof: function (): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                },\n                chain: undefined,\n            });\n\n            return {\n                hash,\n                from: walletClient.account.address,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n            };\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildTransferDetails = async (\n    state: State,\n    runtime: IAgentRuntime,\n    wp: WalletProvider\n): Promise<TransferParams> => {\n    const chains = Object.keys(wp.chains);\n    state.supportedChains = chains.map((item) => `\"${item}\"`).join(\"|\");\n\n    const context = composeContext({\n        state,\n        template: transferTemplate,\n    });\n\n    const transferDetails = (await generateObjectDeprecated({\n        runtime,\n        context,\n        modelClass: ModelClass.SMALL,\n    })) as TransferParams;\n\n    const existingChain = wp.chains[String(transferDetails.fromChain)];\n\n    if (!existingChain) {\n        throw new Error(\n            \"The chain \" +\n                String(transferDetails.fromChain) +\n                \" not configured yet. Add the chain or choose one from configured: \" +\n                chains.toString()\n        );\n    }\n\n    return transferDetails;\n};\n\nexport const transferAction: Action = {\n    name: \"TRANSFER\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        console.log(\"Transfer action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n\n        // Compose transfer context\n        const paramOptions = await buildTransferDetails(\n            state,\n            runtime,\n            walletProvider\n        );\n\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${paramOptions.amount} KAIA on ${String(paramOptions.fromChain)} to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: transferResp.hash,\n                        amount: formatEther(transferResp.value),\n                        recipient: transferResp.to,\n                        chain: paramOptions.fromChain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if(callback && error instanceof Error) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"KAIA_EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: transferExamples as ActionExample[][],\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport {\n    type IAgentRuntime,\n    type Provider,\n    type Memory,\n    type State,\n    type ICacheManager,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n} from \"viem\";\nimport * as viemChains from \"viem/chains\";\nimport NodeCache from \"node-cache\";\nimport * as path from \"path\";\n\nimport type { SupportedChain } from \"../types/account\";\n\nexport class WalletProvider {\n    private cache: NodeCache;\n    private cacheKey: string = \"evm/wallet\";\n    private currentChain: SupportedChain = \"mainnet\";\n    private CACHE_EXPIRY_SEC = 5;\n    chains: Record<string, Chain> = { ...viemChains };\n    account: PrivateKeyAccount;\n\n    constructor(\n        accountOrPrivateKey: PrivateKeyAccount | `0x${string}`,\n        private cacheManager: ICacheManager,\n        chains?: Record<string, Chain>\n    ) {\n        this.setAccount(accountOrPrivateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n\n        this.cache = new NodeCache({ stdTTL: this.CACHE_EXPIRY_SEC });\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    async getWalletBalance(): Promise<string | null> {\n        const cacheKey = \"walletBalance_\" + this.currentChain;\n        const cachedData = await this.getCachedData<string>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\n                \"Returning cached wallet balance for chain: \" +\n                    this.currentChain\n            );\n            return cachedData;\n        }\n\n        try {\n            const client = this.getPublicClient(this.currentChain);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            const balanceFormatted = formatUnits(balance, 18);\n            this.setCachedData<string>(cacheKey, balanceFormatted);\n            elizaLogger.log(\n                \"Wallet balance cached for chain: \",\n                this.currentChain\n            );\n            return balanceFormatted;\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    async getWalletBalanceForChain(\n        chainName: SupportedChain\n    ): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(chainName);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private async readFromCache<T>(key: string): Promise<T | null> {\n        const cached = await this.cacheManager.get<T>(\n            path.join(this.cacheKey, key)\n        );\n        return cached;\n    }\n\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\n            expires: Date.now() + this.CACHE_EXPIRY_SEC * 1000,\n        });\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        // Check in-memory cache first\n        const cachedData = this.cache.get<T>(key);\n        if (cachedData) {\n            return cachedData;\n        }\n\n        // Check file-based cache\n        const fileCachedData = await this.readFromCache<T>(key);\n        if (fileCachedData) {\n            // Populate in-memory cache\n            this.cache.set(key, fileCachedData);\n            return fileCachedData;\n        }\n\n        return null;\n    }\n\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\n        // Set in-memory cache\n        this.cache.set(cacheKey, data);\n\n        // Write to file-based cache\n        await this.writeToCache(cacheKey, data);\n    }\n\n    private setAccount = (\n        accountOrPrivateKey: PrivateKeyAccount | `0x${string}`\n    ) => {\n        if (typeof accountOrPrivateKey === \"string\") {\n            this.account = privateKeyToAccount(accountOrPrivateKey);\n        } else {\n            this.account = accountOrPrivateKey;\n        }\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        Object.keys(chains).forEach((chain: string) => {\n            this.chains[chain] = chains[chain];\n        });\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (): Record<string, Chain> => {\n    const chainNames = [\"kaia\", \"kairos\"] as SupportedChain[];\n    const chains = {};\n\n    chainNames.forEach((chainName) => {\n        const chain = WalletProvider.genChainFromName(chainName);\n        chains[chainName] = chain;\n    });\n\n    return chains;\n};\n\nexport const initWalletProvider = async (runtime: IAgentRuntime) => {\n    const chains = genChainsFromRuntime();\n    const privateKey = runtime.getSetting(\n        \"KAIA_EVM_PRIVATE_KEY\"\n    ) as `0x${string}`;\n    if (!privateKey) {\n        throw new Error(\"KAIA_EVM_PRIVATE_KEY is missing\");\n    }\n    return new WalletProvider(privateKey, runtime.cacheManager, chains);\n};\n\nexport const kaiaWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = await initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getWalletBalance();\n            const chain = walletProvider.getCurrentChain();\n            const agentName = state?.agentName || \"The agent\";\n            return `${agentName}'s Kaia Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in Kaia wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const transferTemplate = `You are an AI assistant specialized in processing cryptocurrency transfer requests. Your task is to extract specific information from user messages and format it into a structured JSON response.\n\nFirst, review the recent messages from the conversation:\n\n<recent_messages>\n{{recentMessages}}\n</recent_messages>\n\nHere's a list of supported chains:\n<supported_chains>\n{{supportedChains}}\n</supported_chains>\n\nYour goal is to extract the following information about the requested transfer:\n1. Chain to execute on (must be one of the supported chains)\n2. Amount to transfer (in ETH, without the coin symbol)\n3. Recipient address (must be a valid Ethereum address)\n4. Token symbol or address (if not a native token transfer)\n\nBefore providing the final JSON output, show your reasoning process inside <analysis> tags. Follow these steps:\n\n1. Identify the relevant information from the user's message:\n   - Quote the part of the message mentioning the chain.\n   - Quote the part mentioning the amount.\n   - Quote the part mentioning the recipient address.\n   - Quote the part mentioning the token (if any).\n\n2. Validate each piece of information:\n   - Chain: List all supported chains and check if the mentioned chain is in the list.\n   - Amount: Attempt to convert the amount to a number to verify it's valid.\n   - Address: Check that it starts with \"0x\" and count the number of characters (should be 42).\n   - Token: Note whether it's a native transfer or if a specific token is mentioned.\n\n3. If any information is missing or invalid, prepare an appropriate error message.\n\n4. If all information is valid, summarize your findings.\n\n5. Prepare the JSON structure based on your analysis.\n\nAfter your analysis, provide the final output in a JSON markdown block. All fields except 'token' are required. The JSON should have this structure:\n\n\\`\\`\\`json\n{\n    \"fromChain\": string,\n    \"amount\": string,\n    \"toAddress\": string,\n    \"token\": string | null\n}\n\\`\\`\\`\n\nRemember:\n- The chain name must be a string and must exactly match one of the supported chains.\n- The amount should be a string representing the number without any currency symbol.\n- The recipient address must be a valid Ethereum address starting with \"0x\".\n- If no specific token is mentioned (i.e., it's a native token transfer), set the \"token\" field to null.\n\nNow, process the user's request and provide your response.\n`;","import type { ActionExample } from \"@elizaos/core\";\n\nexport const transferExamples: ActionExample[][] = [\n    [\n        {\n            user: \"user\",\n            content: {\n                text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                action: \"SEND_TOKENS\",\n            },\n        },\n        {\n            user: \"assistant\",\n            content: {\n                text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                action: \"SEND_TOKENS\",\n            },\n        },\n    ],\n];\n","import { ByteArray, formatEther, parseEther, type Hex } from \"viem\";\nimport {\n    Action,\n    ActionExample,\n    composeContext,\n    generateObjectDeprecated,\n    HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { initWalletProvider, WalletProvider } from \"../../providers/wallet\";\nimport type {\n    Transaction,\n    TransferParams,\n    SupportedChain,\n} from \"../../types/account\";\nimport { faucetTemplate } from \"../../templates/faucet\";\nimport { faucetExamples } from \"../../examples/faucet\";\n\nconst fromChain: SupportedChain = \"kairos\";\nconst DEFAULT_FAUCET_AMOUNT = \"1\"; // in KAIA\n\n// Exported for tests\nexport class FaucetAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<Transaction> {\n        console.log(\n            `Transferring Some Kaia Test tokens to (${params.toAddress} on ${fromChain})`\n        );\n\n        if (!params.data) {\n            params.data = \"0x\";\n        }\n\n        const walletClient = this.walletProvider.getWalletClient(fromChain);\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: walletClient.account,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n                kzg: {\n                    blobToKzgCommitment: function (): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                    computeBlobKzgProof: function (): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                },\n                chain: undefined,\n            });\n\n            return {\n                hash,\n                from: walletClient.account.address,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n            };\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildTransferDetails = async (\n    state: State,\n    runtime: IAgentRuntime,\n    wp: WalletProvider\n): Promise<TransferParams> => {\n    const chains = Object.keys(wp.chains);\n    state.supportedChains = chains.map((item) => `\"${item}\"`).join(\"|\");\n\n    const context = composeContext({\n        state,\n        template: faucetTemplate,\n    });\n\n    const transferDetails = (await generateObjectDeprecated({\n        runtime,\n        context,\n        modelClass: ModelClass.SMALL,\n    })) as TransferParams;\n\n    const existingChain = wp.chains[fromChain];\n\n    if (!existingChain) {\n        throw new Error(\n            \"The chain \" +\n                fromChain +\n                \" not configured yet. Add the chain or choose one from configured: \" +\n                chains.toString()\n        );\n    }\n\n    return transferDetails;\n};\n\nexport const faucetAction: Action = {\n    name: \"FAUCET\",\n    description: \"Transfer some kaia test tokens to an address on Kaia testnet\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        console.log(\"Faucet Transfer action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const faucetAmount = runtime.getSetting(\"KAIA_FAUCET_AMOUNT\") || DEFAULT_FAUCET_AMOUNT;\n        const action = new FaucetAction(walletProvider);\n\n        // Compose transfer context\n        const paramOptions = await buildTransferDetails(\n            state,\n            runtime,\n            walletProvider\n        );\n\n        paramOptions.amount = faucetAmount;\n\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${paramOptions.amount} test tokens to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: transferResp.hash,\n                        amount: formatEther(transferResp.value),\n                        recipient: transferResp.to,\n                        chain: fromChain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error during faucet token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring faucet tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"KAIA_EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: faucetExamples as ActionExample[][],\n    similes: [\n        \"SEND_FAUCET_TOKENS\",\n        \"GET_FAUCET_TOKENS\",\n        \"MOVE_FAUCET_TOKENS\",\n        \"SEND_TEST_TOKENS\",\n        \"GET_TEST_TOKENS\",\n        \"MOVE_TEST_TOKENS\",\n    ],\n};\n","export const faucetTemplate = `You are an AI assistant specialized in processing faucet requests for the Kaia Faucet. Your task is to extract specific information from user messages and format it into a structured JSON response.\n\nFirst, review the recent messages from the conversation:\n\n<recent_messages>\n{{recentMessages}}\n</recent_messages>\n\nYour goal is to extract the following information about the requested faucet transaction:\n1. Recipient address (must be a valid Kaia address)\n\nBefore providing the final JSON output, show your reasoning process inside <analysis> tags. Follow these steps:\n\n1. Identify the relevant information from the user's message:\n   - Quote the part mentioning the recipient address.\n\n2. Validate each piece of information:\n   - Address: Check that it starts with \"0x\" and count the number of characters (should be 42).\n\n3. If any information is missing or invalid, prepare an appropriate error message.\n\n4. If all information is valid, summarize your findings.\n\n5. Prepare the JSON structure based on your analysis.\n\nAfter your analysis, provide the final output in a JSON markdown block. The JSON should have this structure:\n\n\\`\\`\\`json\n{\n    \"toAddress\": string\n}\n\\`\\`\\`\n\nRemember:\n- The recipient address must be a valid Kaia address starting with \"0x\".\n\nNow, process the user's request and provide your response.\n`;\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const faucetExamples: ActionExample[][] = [\n    [\n        {\n            user: \"user\",\n            content: {\n                text: \"Transfer some faucet kaia testnet tokens to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                action: \"FAUCET\",\n            },\n        },\n        {\n            user: \"assistant\",\n            content: {\n                text: \"I'll help you send some Kaia testnet tokens to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                action: \"FAUCET\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can i get some test tokens to 0x4d69770905f43c07d4085dfd296a03484d05280f?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"let me transfer test tokens to 0x4d69770905f43c07d4085dfd296a03484d05280f for you.\",\n                action: \"FAUCET\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can i get faucets to 0x4d69770905f43c07d4085dfd296a03484d05280f?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"let me transfer some test tokens to 0x4d69770905f43c07d4085dfd296a03484d05280f for you.\",\n                action: \"FAUCET\",\n            },\n        },\n    ],\n];\n","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getNetworkTemplate } from \"../../templates/getNetwork\";\nimport { getLatestBlockExamples } from \"../../examples/getLatestBlock\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\n\nexport const getLatestBlockAction: Action = {\n    name: \"GET_LATEST_BLOCK\",\n    similes: [\n        \"BLOCK_HEIGHT\",\n        \"KAIA_BLOCK_HEIGHT\",\n        \"CHECK_KAIA_LATEST_BLOCK\",\n        \"CHECK_LATEST_BLOCK\",\n        \"CHECK_KAIA_LATEST_BLOCK_HEIGHT\",\n        \"CHECKOUT_LATEST_BLOCK\",\n        \"CHECK_BLOCK_HEIGHT\",\n        \"LATEST_BLOCK\",\n        \"LATEST_BLOCK_NUMBER\",\n        \"CHECK_LATEST_BLOCK_NUMBER\",\n        \"CHECK_KAIA_LATEST_BLOCK_NUMBER\",\n    ],\n    description: \"Get the latest block number for a given network\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const txnContext = composeContext({\n            state,\n            template: getNetworkTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: txnContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // parse content\n        const hasNetwork = content?.network && !content?.error;\n\n        if (!hasNetwork) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL[String(content.network)],\n        });\n\n        // Fetch Account Balance & respond\n        try {\n            const kaiaScanData = await kaiaScanService.getLatestBlock();\n            elizaLogger.success(\n                `Successfully fetched latest block number for ${content.network}`\n            );\n\n            if (callback) {\n                callback({\n                    text: `The latest block number of ${content.network} is ${kaiaScanData.block_id}`,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_LATEST_BLOCK handler:\", error);\n\n            callback({\n                text: `Error fetching balance: ${error.message}`,\n                content: { error: error.message },\n            });\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getLatestBlockExamples as ActionExample[][],\n} as Action;\n","export const getNetworkTemplate = `Respond with a JSON object containing the \"network\". The network must be a valid Kaia network provided in the input.\n\nIMPORTANT: Response must ALWAYS include only \"network\" field.\n\nExample response:\n\\`\\`\\`json\n{\n    \"network\": \"kairos\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the network from the most recent message. Respond with a JSON markdown block containing only \"network\".`;","import type { ActionExample } from \"@elizaos/core\";\n\nexport const getLatestBlockExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's is the latest block number like right now?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"In which network?\",\n                action: \"NONE\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"kairos\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me check the latest block number in kairos for you.\",\n                action: \"GET_LATEST_BLOCK\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"It's currently 1000000 block height. You can check the latest block number in kaia as well.\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the latest block number of kaia?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the current block height in kaia for you.\",\n                action: \"GET_LATEST_BLOCK\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"It's currently 10000000 block height and can explore kaia minidapps.\",\n            },\n        },\n    ]\n];\n","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getLatestBlockExamples } from \"../../examples/getLatestBlock\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\nimport { getBlockNumberTemplate } from \"../../templates/getBlockNumber\";\n\nexport const getBlockAction: Action = {\n    name: \"GET_BLOCK\",\n    similes: [\n        \"BLOCK_INFO\",\n        \"KAIA_GET_BLOCK\",\n        \"CHECK_KAIA_GET_BLOCK\",\n        \"CHECK_GET_BLOCK\",\n    ],\n    description: \"Get the block info for a given block number\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const txnContext = composeContext({\n            state,\n            template: getBlockNumberTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: txnContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // parse content\n        const hasNetwork = content?.network && !content?.error;\n\n        if (!hasNetwork) {\n            return;\n        }\n        console.log(content);\n        const hasBlockNumber = content?.blocknumber && !content?.error;\n\n        if (!hasBlockNumber) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL[String(content.network)],\n        });\n\n        // Fetch Account Balance & respond\n        try {\n            const kaiaScanData = await kaiaScanService.getBlock(\n                String(content.blocknumber)\n            );\n            elizaLogger.success(\n                `Successfully fetched block info for ${content.blocknumber} on ${content.network}`\n            );\n\n            if (callback) {\n                let blockInfo = `Block Number: ${kaiaScanData.block_id}\\n`;\n                blockInfo += `Block Time: ${kaiaScanData.datetime}\\n`;\n                blockInfo += `Block Hash: ${kaiaScanData.hash}\\n`;\n                blockInfo += `Total Transaction Count: ${kaiaScanData.total_transaction_count}`;\n                callback({\n                    text: `The block info for ${content.blocknumber} on ${content.network} is ${blockInfo}`,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_BLOCK handler:\", error);\n\n            callback({\n                text: `Error fetching block info: ${error.message}`,\n                content: { error: error.message },\n            });\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getLatestBlockExamples as ActionExample[][],\n} as Action;\n","export const getBlockNumberTemplate = `Respond with a JSON object containing both \"blocknumber\" and \"network\". The network must be a valid Kaia network provided in the input.\n\nIMPORTANT: Response must ALWAYS include both \"blocknumber\" and \"network\" field.\n\nExample response:\n\\`\\`\\`json\n{\n    \"blocknumber\": 123456,\n    \"network\": \"kairos\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the blocknumber and network from the most recent message. Respond with a JSON markdown block containing both \"blocknumber\" and \"network\".`;","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getTransactionsByAccountExamples } from \"../../examples/getTransactionsByAccount\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\nimport { getTransactionsByAccountTemplate } from \"../../templates/getTransactionsByAccount\";\n\nexport const getTransactionsByAccountAction: Action = {\n    name: \"GET_TRANSACTIONS_BY_ACCOUNT\",\n    similes: [\n        \"GET_TRANSACTIONS_BY_ACCOUNT\",\n        \"GET_TRANSACTIONS_BY_ACCOUNT\",\n        \"KAIA_TRANSACTIONS_BY_ACCOUNT\",\n        \"CHECK_TRANSACTIONS_BY_ACCOUNT\",\n        \"CHECK_TRANSACTIONS_BY_ADDRESS\",\n        \"KAIA_TRANSACTIONS_BY_ADDRESS\",\n        \"GET_TRANSACTIONS_BY_ADDRESS\",\n        \"GET_TRANSACTIONS_BY_ADDRESS\",\n    ],\n    description: \"Get the transactions by account\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const txnContext = composeContext({\n            state,\n            template: getTransactionsByAccountTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: txnContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // parse content\n        const hasNetwork = content?.network && !content?.error;\n\n        if (!hasNetwork) {\n            return;\n        }\n\n        const hasAddress = content?.address && !content?.error;\n\n        if (!hasAddress) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL[String(content.network)],\n        });\n\n        // Fetch Account Balance & respond\n        try {\n            const kaiaScanData = await kaiaScanService.getTransactionsByAccount(\n                String(content.address)\n            );\n            elizaLogger.success(\n                `Successfully fetched transactions for ${content.address} on ${content.network}`\n            );\n\n            if (callback) {\n                let AccountTransactions;\n                if (kaiaScanData && kaiaScanData.results.length > 0) {\n                    kaiaScanData.results.map((transaction, index) => {\n                        if (index > 5) return;\n                        AccountTransactions += ` ----------------------------------- \\n`;\n                        AccountTransactions += `${index + 1}:\\n`;\n                        AccountTransactions += `from: ${transaction.from},\\n`;\n                        AccountTransactions += `to: ${transaction.to}, \\n`;\n                        AccountTransactions += `value: ${transaction.amount}, \\n`;\n                        AccountTransactions += `type: ${transaction.transaction_type}, \\n`;\n                        AccountTransactions += `hash: ${transaction.transaction_hash}\\n`;\n                    });\n                } else {\n                    AccountTransactions =\n                        \"No transactions found for this address\";\n                }\n                console.log(AccountTransactions);\n                callback({\n                    text: `The transactions for ${content.address} account on ${content.network} is ${AccountTransactions}`,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\n                \"Error in GET_TRANSACTIONS_BY_BLOCK_NUMBER handler:\",\n                error\n            );\n\n            callback({\n                text: `Error fetching transactions of a block info: ${error.message}`,\n                content: { error: error.message },\n            });\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getTransactionsByAccountExamples as ActionExample[][],\n} as Action;\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const getTransactionsByAccountExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's are the transactions for address 0x742d35Cc6634C0532925a3b844Bc454e4438f44e like right now?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"In which network?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"kairos\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me check the transactions for address 0x742d35Cc6634C0532925a3b844Bc454e4438f44e in kairos for you.\",\n                action: \"GET_TRANSACTIONS_BY_ACCOUNT\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"It's Block Number: 1234 \\n Block Time: 10/10/2025 \\n Block Hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e \\n Block Size: 123. Please explore kaia ecosystem.\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the list of transactions for address 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on kaia?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the address 0x742d35Cc6634C0532925a3b844Bc454e4438f44e for transactions in kaia for you.\",\n                action: \"GET_BLOCK\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"It's Block Number: 1234 \\n Block Time: 10/10/2025 \\n Block Hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e \\n Block Size: 123. and can explore kaia minidapps.\",\n            },\n        },\n    ]\n];\n","export const getTransactionsByAccountTemplate = `Respond with a JSON object containing the \"address\" and \"network\". The address must be a valid Kaia EVM address provided in the input. \n\nIMPORTANT: Response must ALWAYS include both \"address\" and \"network\" fields.\n\nExample response:\n\\`\\`\\`json\n{\n    \"address\": \"0x1234567890abcdef1234567890abcdef12345678\",\n    \"network\": \"kairos\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the Kaia EVM address from the most recent message. Respond with a JSON markdown block containing both \"address\" and \"network\".`;\n\n","import { elizaLogger } from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { validateKaiaScanConfig } from \"../../environment\";\nimport { getKaiaInfoExamples } from \"../../examples/getKaiaInfo\";\nimport { KaiaScanService } from \"../../services\";\nimport { API_DEFAULTS } from \"../../constants\";\n\nexport const getKaiaInfoAction: Action = {\n    name: \"GET_KAIA_INFO\",\n    similes: [\n        \"KAIA_INFO\",\n        \"KAIA\",\n        \"INFO\",\n        \"KAIA_PRICE\",\n        \"PRICE\",\n        \"KAIA_MARKET\",\n        \"MARKET\",\n        \"KAIA_MARKET_INFO\",\n        \"MARKET_INFO\",\n        \"KAIA_USD_PRICE\",\n        \"USD_PRICE\",\n        \"KAIA_BTC_PRICE\",\n        \"BTC_PRICE\",\n        \"KAIA_MARKET_CAP\",\n        \"KAIA_TOTAL_SUPPLY\",\n        \"TOTAL_SUPPLY\",\n        \"KAIA_VOLUME\",\n        \"VOLUME\",\n        \"KAIA_OVERVIEW\",\n        \"OVERVIEW_OF_KAIA\",\n        \"PRICE_OF_KAIA\",\n    ],\n    description: \"Get the current info about Kaia Token\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKaiaScanConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // Instantiate API service\n        const config = await validateKaiaScanConfig(runtime);\n        const kaiaScanService = new KaiaScanService({\n            apiKey: config.KAIA_KAIASCAN_API_KEY,\n            baseUrl: API_DEFAULTS.BASE_URL.kaia,\n        });\n\n        // Fetch Account Balance & respond\n        try {\n            const kaiaScanData = await kaiaScanService.getKaiaInfo();\n            elizaLogger.success(`Successfully fetched Kaia Token Info`);\n\n            if (callback) {\n                let responseText = `Kaia Token Info:\\n`;\n                responseText += `- USD Price: ${kaiaScanData.klay_price.usd_price}\\n`;\n                responseText += `- BTC Price: ${kaiaScanData.klay_price.btc_price}\\n`;\n                responseText += `- USD Price Changes: ${kaiaScanData.klay_price.usd_price_changes}\\n`;\n                responseText += `- Market Cap: ${kaiaScanData.klay_price.market_cap}\\n`;\n                responseText += `- Total Supply: ${kaiaScanData.klay_price.total_supply}\\n`;\n                responseText += `- Volume: ${kaiaScanData.klay_price.volume}\\n`;\n                callback({\n                    text: responseText,\n                    content: kaiaScanData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_KAIA_INFO handler:\", error);\n\n            callback({\n                text: `Error fetching Kaia Info: ${error.message}`,\n                content: { error: error.message },\n            });\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getKaiaInfoExamples as ActionExample[][],\n} as Action;\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const getKaiaInfoExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you give me overview of kaia?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Sure, let me fetch the Kaia details for you.\",\n                action: \"GET_KAIA_INFO\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you tell me the Kaia price details?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Sure, let me fetch the Kaia price details for you.\",\n                action: \"GET_KAIA_INFO\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the current market cap of Kaia?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me check the current market cap of Kaia for you.\",\n                action: \"GET_KAIA_INFO\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"How much is the total supply of Kaia?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the total supply of Kaia for you.\",\n                action: \"GET_KAIA_INFO\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you provide the volume of Kaia?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me fetch the volume of Kaia for you.\",\n                action: \"GET_KAIA_INFO\",\n            },\n        },\n    ],\n];\n","import type { Plugin } from \"@elizaos/core\";\nimport {\n    getCurrentBalanceAction,\n    getNFTBalanceAction,\n    getFTBalanceDetailsAction,\n    getAccountOverviewAction,\n    faucetAction,\n    getLatestBlockAction,\n    transferAction,\n    getBlockAction,\n    getTransactionsByAccountAction,\n    getKaiaInfoAction,\n} from \"./actions\";\nimport { kaiaWalletProvider } from \"./providers/wallet\";\n\nexport * as actions from \"./actions\";\n\nexport const kaiaPlugin: Plugin = {\n    name: \"kaia\",\n    description: \"Kaia blockchain integration plugin\",\n    actions: [\n        getLatestBlockAction,\n        getNFTBalanceAction,\n        getFTBalanceDetailsAction,\n        getCurrentBalanceAction,\n        getAccountOverviewAction,\n        faucetAction,\n        transferAction,\n        getBlockAction,\n        getTransactionsByAccountAction,\n        getKaiaInfoAction,\n    ],\n    evaluators: [],\n    providers: [kaiaWalletProvider],\n};\nexport default kaiaPlugin;\n"],"mappings":"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","names":["composeContext","elizaLogger","generateMessageResponse","ModelClass","composeContext","generateMessageResponse","ModelClass","elizaLogger","composeContext","elizaLogger","generateMessageResponse","ModelClass","composeContext","generateMessageResponse","ModelClass","elizaLogger","composeContext","elizaLogger","generateMessageResponse","ModelClass","composeContext","generateMessageResponse","ModelClass","elizaLogger","composeContext","ModelClass","elizaLogger","composeContext","ModelClass","formatEther","parseEther","composeContext","generateObjectDeprecated","ModelClass","parseEther","buildTransferDetails","composeContext","generateObjectDeprecated","ModelClass","formatEther","composeContext","elizaLogger","generateMessageResponse","ModelClass","composeContext","generateMessageResponse","ModelClass","elizaLogger","composeContext","elizaLogger","generateMessageResponse","ModelClass","composeContext","generateMessageResponse","ModelClass","elizaLogger","composeContext","elizaLogger","generateMessageResponse","ModelClass","composeContext","generateMessageResponse","ModelClass","elizaLogger","elizaLogger","elizaLogger"]}